local RS=game:GetService('ReplicatedStorage');local SS=game:GetService('ServerStorage');local C=require(RS.Modules.Shared['Config.Module']);local Net=require(RS.Net.Events);local S=require(RS.Net.Schemas['ChaosBroadcast']);local function b(n,d)local p={name=n,duration=d};if S.validate(p)then Net.Get('ChaosBroadcast'):FireAllClients(p)end end;task.spawn(function()while true do task.wait(C.CHAOS.PERIOD_SEC);local f=SS:FindFirstChild('Data')and SS.Data:FindFirstChild('ChaosEvents');local L={};if f then for _,m in ipairs(f:GetChildren())do if m:IsA('ModuleScript')then table.insert(L,m)end end end;if #L==0 then warn('[ChaosService] No chaos modules')continue end;local cnt=math.min(C.CHAOS.MAX_SIMULTANEOUS,#L);local picked={};while #picked<cnt do local c=L[math.random(1,#L)];local seen=false;for _,v in ipairs(picked)do if v==c then seen=true break end end;if not seen then table.insert(picked,c)end end;for _,mod in ipairs(picked)do local ok,d=pcall(require,mod);if ok and type(d)=='table' and d.Apply then local dur=d.Duration or C.CHAOS.DURATION_SEC;print('[Chaos] Apply',d.Name);b(d.Name,dur);task.spawn(function()local ctx={duration=dur};pcall(d.Apply,ctx);task.wait(dur);if d.Cleanup then pcall(d.Cleanup,ctx)end;print('[Chaos] Cleanup',d.Name)end)else warn('[ChaosService] bad module',mod.Name)end end end end)
